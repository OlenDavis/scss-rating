$light-red: #f26666;
$blue: #1fb8ea;
$light-blue: #ADD8E6;
$gray: #e9e9e9;
$shadow-color: #888888;


@mixin transform($transform) {
	-webkit-transform: $transform;
	-moz-transform: $transform;
	-ms-transform: $transform;
	-o-transform: $transform;
	transform: $transform;
}
@mixin transform-origin($origin) {
	-webkit-transform-origin: $origin; 
	-moz-transform-origin: $origin; 
	-ms-transform-origin: $origin; 
	-o-transform-origin: $origin; 
	transform-origin :$origin;	
}

@mixin box-shadow($shadow) {
	-webkit-box-shadow: $shadow;
	-moz-box-shadow: $shadow;
	-ms-box-shadow: $shadow;
	-o-box-shadow: $shadow;
	box-shadow: $shadow;
}

.container {
	height: 180px;
	width: 180px;
	border: 1px solid $gray;
	border-radius: 20px;
	float: right;
	margin: 5px;
}
//Take out float for smaller window
// 1. This destroys the effect; for smaller viewports you ought to be able to easily make the whole control smaller - hence why you should never use px sizing, but always em - this way, when you need to make something smaller, you can simply set a font-size: 80% (for instance) on the parent element, making all measurements consistently 80%, keeping the structure of everything intact.
@media (max-width: 1170px){
	.container {
		clear:both;
	}
}
.canHover .container:hover {
	background-color: $blue;
	@include box-shadow(2px 5px 5px $shadow-color);
	border: 0px;		
}
//.active class in order to make rating selection
.active {
	@extend .container; // 2. rather than extending, you can simply nest this style (and many others later) in .container like this:
	// .container { &.active { ... } }
	background-color: $blue;
	& ~ .container{
		background-color: $blue;
	}
	& .star:before {
		border-bottom: 90px solid white // 3. ought to have semicolon (and if you're really concerned about filesize let a CSS minifier remove unnecessary semicolons like this, not muddy up what should be consistent code) - this sort of inconsistency makes me concerned you were copy-pasting this from elsewhere, in which case you should provide a reference from where you copied it.
	}
	& .star:after, .star {
		border-bottom: 50px solid white // ditto 3.
	}
	& #heart:before, #heart:after {
		background-color: white;
	}
}

.active:first-child, .canHover .container:first-child:hover {
	@extend .container; // see note 2. you could have changed this CSS selector to &.active:first-child, .canHover &:first-child:hover. In fact, better yet, you could have written this:
	// &:first-child { &.active, .canHover &:hover { ... } }
	background-color: red;
	border: 0px;
	// Adds light red background to container
	& ~ .container{
		background-color: $light-red;
	}
}

// Adds light blue background to container and white fill for star
.canHover .container:hover ~ .container{ // Great! That's the idea!
	background-color: $light-blue;
	& .star:before {
		border-bottom: 90px solid white // ditto 3.
	}
	& .star:after, .star {
		border-bottom: 50px solid white // ditto 3.
	}
}

.canHover #heart:hover .container{
	background-color: red;
}

.canHover .container:hover {
	& #heart:before, #heart:after {
		background-color: white;
	}
	& .star:before{
		border-bottom: 90px solid white;
	}
	& .star:after, .star{
		border-bottom: 50px solid white;
	}
}

//Create star shape
// All of these dimensions are given in px, which is a huge no-no for flexibility; for instance, how on earth do you expect to be able to easily make this smaller? One option (even with using px) is to set a base px size as a variable and have all the sizes in each icon be some super-specific multiple of that; i.e. if the $base-value is 10px, then top below would be 1 * $base-value, while margin would be 5 * $base-value 0 * $base-value and so on.
.star {
	top: 10px;
    width: 0;
    height: 0;
    left: 20px;
    margin: 50px 0;
    position: relative;
    display: inline-block;
    border-right: 70px solid transparent;
    border-bottom: 50px solid $gray;
    border-left: 70px solid transparent;
	@include transform(rotate(35deg));
    &:before {
	    height: 0;
	    width: 0;
	    position: absolute;
	    display: block;
	    top: -45px;
	    left: -45px;
	    border-bottom: 90px solid $gray;
	    border-left: 25px solid transparent;
	    border-right: 25px solid transparent;
	    content: '';
	    @include transform(rotate(-35deg));
    }
    &:after {
	    content: '';
	    width: 0;
	    height: 0;
	    position: absolute;
	    display: block;
	    top: 0px;
	    left: -70px;
	    color: $gray;
	    border-right: 70px solid transparent;
	    border-bottom: 50px solid $gray;
	    border-left: 70px solid transparent;
	    @include transform(rotate(-70deg));  	
    }
}
//Create heart shape
#heart { 
	position: relative;
	display: inline-block;
	width: 0px; 
	height: 90px; 
	&:before, &:after{
		position: absolute; 
		content: ""; 
		left: 90px; 
		top: 31px; 
		width: 80px; 
		height: 130px; 
		background: $gray; 
		border-radius: 50px 50px 0 0; 
		@include transform(rotate(-45deg));
		@include transform-origin(0 100%);
	}
	&:after {
		left: 10px; 
		@include transform(rotate(45deg));
		@include transform-origin(100% 100%);	
	}
} 
